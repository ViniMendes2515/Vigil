// Code generated by MockGen. DO NOT EDIT.
// Source: database/url_repository.go

// Package mock is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlRepository is a mock of UrlRepository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// AddUrl mocks base method.
func (m *MockUrlRepository) AddUrl(site, url, name string, precoInicial, precoLimite float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUrl", site, url, name, precoInicial, precoLimite)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUrl indicates an expected call of AddUrl.
func (mr *MockUrlRepositoryMockRecorder) AddUrl(site, url, name, precoInicial, precoLimite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUrl", reflect.TypeOf((*MockUrlRepository)(nil).AddUrl), site, url, name, precoInicial, precoLimite)
}

// GetSiteUrls mocks base method.
func (m *MockUrlRepository) GetSiteUrls(host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteUrls", host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteUrls indicates an expected call of GetSiteUrls.
func (mr *MockUrlRepositoryMockRecorder) GetSiteUrls(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteUrls", reflect.TypeOf((*MockUrlRepository)(nil).GetSiteUrls), host)
}

// GetUrls mocks base method.
func (m *MockUrlRepository) GetUrls() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrls")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrls indicates an expected call of GetUrls.
func (mr *MockUrlRepositoryMockRecorder) GetUrls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrls", reflect.TypeOf((*MockUrlRepository)(nil).GetUrls))
}

// RemoveAllUrls mocks base method.
func (m *MockUrlRepository) RemoveAllUrls() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllUrls")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllUrls indicates an expected call of RemoveAllUrls.
func (mr *MockUrlRepositoryMockRecorder) RemoveAllUrls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllUrls", reflect.TypeOf((*MockUrlRepository)(nil).RemoveAllUrls))
}

// RemoveUrl mocks base method.
func (m *MockUrlRepository) RemoveUrl(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUrl", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUrl indicates an expected call of RemoveUrl.
func (mr *MockUrlRepositoryMockRecorder) RemoveUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUrl", reflect.TypeOf((*MockUrlRepository)(nil).RemoveUrl), url)
}

// RemoveUrlById mocks base method.
func (m *MockUrlRepository) RemoveUrlById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUrlById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUrlById indicates an expected call of RemoveUrlById.
func (mr *MockUrlRepositoryMockRecorder) RemoveUrlById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUrlById", reflect.TypeOf((*MockUrlRepository)(nil).RemoveUrlById), id)
}
